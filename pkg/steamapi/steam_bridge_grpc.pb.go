// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: Proto/steam_bridge.proto

package steamapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SteamAuthService_LoginWithCredentials_FullMethodName     = "/steambridge.SteamAuthService/LoginWithCredentials"
	SteamAuthService_ContinueAuthSession_FullMethodName      = "/steambridge.SteamAuthService/ContinueAuthSession"
	SteamAuthService_LoginWithQR_FullMethodName              = "/steambridge.SteamAuthService/LoginWithQR"
	SteamAuthService_GetAuthStatus_FullMethodName            = "/steambridge.SteamAuthService/GetAuthStatus"
	SteamAuthService_ReAuthenticateWithTokens_FullMethodName = "/steambridge.SteamAuthService/ReAuthenticateWithTokens"
	SteamAuthService_Logout_FullMethodName                   = "/steambridge.SteamAuthService/Logout"
)

// SteamAuthServiceClient is the client API for SteamAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Authentication Service
type SteamAuthServiceClient interface {
	LoginWithCredentials(ctx context.Context, in *CredentialsLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	ContinueAuthSession(ctx context.Context, in *ContinueAuthRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	LoginWithQR(ctx context.Context, in *QRLoginRequest, opts ...grpc.CallOption) (*QRLoginResponse, error)
	GetAuthStatus(ctx context.Context, in *AuthStatusRequest, opts ...grpc.CallOption) (*AuthStatusResponse, error)
	ReAuthenticateWithTokens(ctx context.Context, in *TokenReAuthRequest, opts ...grpc.CallOption) (*TokenReAuthResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
}

type steamAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSteamAuthServiceClient(cc grpc.ClientConnInterface) SteamAuthServiceClient {
	return &steamAuthServiceClient{cc}
}

func (c *steamAuthServiceClient) LoginWithCredentials(ctx context.Context, in *CredentialsLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, SteamAuthService_LoginWithCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamAuthServiceClient) ContinueAuthSession(ctx context.Context, in *ContinueAuthRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, SteamAuthService_ContinueAuthSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamAuthServiceClient) LoginWithQR(ctx context.Context, in *QRLoginRequest, opts ...grpc.CallOption) (*QRLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QRLoginResponse)
	err := c.cc.Invoke(ctx, SteamAuthService_LoginWithQR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamAuthServiceClient) GetAuthStatus(ctx context.Context, in *AuthStatusRequest, opts ...grpc.CallOption) (*AuthStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthStatusResponse)
	err := c.cc.Invoke(ctx, SteamAuthService_GetAuthStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamAuthServiceClient) ReAuthenticateWithTokens(ctx context.Context, in *TokenReAuthRequest, opts ...grpc.CallOption) (*TokenReAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenReAuthResponse)
	err := c.cc.Invoke(ctx, SteamAuthService_ReAuthenticateWithTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamAuthServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, SteamAuthService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SteamAuthServiceServer is the server API for SteamAuthService service.
// All implementations must embed UnimplementedSteamAuthServiceServer
// for forward compatibility.
//
// Authentication Service
type SteamAuthServiceServer interface {
	LoginWithCredentials(context.Context, *CredentialsLoginRequest) (*LoginResponse, error)
	ContinueAuthSession(context.Context, *ContinueAuthRequest) (*LoginResponse, error)
	LoginWithQR(context.Context, *QRLoginRequest) (*QRLoginResponse, error)
	GetAuthStatus(context.Context, *AuthStatusRequest) (*AuthStatusResponse, error)
	ReAuthenticateWithTokens(context.Context, *TokenReAuthRequest) (*TokenReAuthResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	mustEmbedUnimplementedSteamAuthServiceServer()
}

// UnimplementedSteamAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSteamAuthServiceServer struct{}

func (UnimplementedSteamAuthServiceServer) LoginWithCredentials(context.Context, *CredentialsLoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithCredentials not implemented")
}
func (UnimplementedSteamAuthServiceServer) ContinueAuthSession(context.Context, *ContinueAuthRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueAuthSession not implemented")
}
func (UnimplementedSteamAuthServiceServer) LoginWithQR(context.Context, *QRLoginRequest) (*QRLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithQR not implemented")
}
func (UnimplementedSteamAuthServiceServer) GetAuthStatus(context.Context, *AuthStatusRequest) (*AuthStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthStatus not implemented")
}
func (UnimplementedSteamAuthServiceServer) ReAuthenticateWithTokens(context.Context, *TokenReAuthRequest) (*TokenReAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReAuthenticateWithTokens not implemented")
}
func (UnimplementedSteamAuthServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSteamAuthServiceServer) mustEmbedUnimplementedSteamAuthServiceServer() {}
func (UnimplementedSteamAuthServiceServer) testEmbeddedByValue()                          {}

// UnsafeSteamAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SteamAuthServiceServer will
// result in compilation errors.
type UnsafeSteamAuthServiceServer interface {
	mustEmbedUnimplementedSteamAuthServiceServer()
}

func RegisterSteamAuthServiceServer(s grpc.ServiceRegistrar, srv SteamAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedSteamAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SteamAuthService_ServiceDesc, srv)
}

func _SteamAuthService_LoginWithCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamAuthServiceServer).LoginWithCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamAuthService_LoginWithCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamAuthServiceServer).LoginWithCredentials(ctx, req.(*CredentialsLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamAuthService_ContinueAuthSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinueAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamAuthServiceServer).ContinueAuthSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamAuthService_ContinueAuthSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamAuthServiceServer).ContinueAuthSession(ctx, req.(*ContinueAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamAuthService_LoginWithQR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QRLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamAuthServiceServer).LoginWithQR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamAuthService_LoginWithQR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamAuthServiceServer).LoginWithQR(ctx, req.(*QRLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamAuthService_GetAuthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamAuthServiceServer).GetAuthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamAuthService_GetAuthStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamAuthServiceServer).GetAuthStatus(ctx, req.(*AuthStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamAuthService_ReAuthenticateWithTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenReAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamAuthServiceServer).ReAuthenticateWithTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamAuthService_ReAuthenticateWithTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamAuthServiceServer).ReAuthenticateWithTokens(ctx, req.(*TokenReAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamAuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamAuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamAuthService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamAuthServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SteamAuthService_ServiceDesc is the grpc.ServiceDesc for SteamAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SteamAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "steambridge.SteamAuthService",
	HandlerType: (*SteamAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginWithCredentials",
			Handler:    _SteamAuthService_LoginWithCredentials_Handler,
		},
		{
			MethodName: "ContinueAuthSession",
			Handler:    _SteamAuthService_ContinueAuthSession_Handler,
		},
		{
			MethodName: "LoginWithQR",
			Handler:    _SteamAuthService_LoginWithQR_Handler,
		},
		{
			MethodName: "GetAuthStatus",
			Handler:    _SteamAuthService_GetAuthStatus_Handler,
		},
		{
			MethodName: "ReAuthenticateWithTokens",
			Handler:    _SteamAuthService_ReAuthenticateWithTokens_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SteamAuthService_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/steam_bridge.proto",
}

const (
	SteamUserService_GetUserInfo_FullMethodName      = "/steambridge.SteamUserService/GetUserInfo"
	SteamUserService_GetFriendsList_FullMethodName   = "/steambridge.SteamUserService/GetFriendsList"
	SteamUserService_GetUserStatus_FullMethodName    = "/steambridge.SteamUserService/GetUserStatus"
	SteamUserService_ResolveVanityURL_FullMethodName = "/steambridge.SteamUserService/ResolveVanityURL"
)

// SteamUserServiceClient is the client API for SteamUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// User Service
type SteamUserServiceClient interface {
	GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	GetFriendsList(ctx context.Context, in *FriendsListRequest, opts ...grpc.CallOption) (*FriendsListResponse, error)
	GetUserStatus(ctx context.Context, in *UserStatusRequest, opts ...grpc.CallOption) (*UserStatusResponse, error)
	ResolveVanityURL(ctx context.Context, in *ResolveVanityURLRequest, opts ...grpc.CallOption) (*ResolveVanityURLResponse, error)
}

type steamUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSteamUserServiceClient(cc grpc.ClientConnInterface) SteamUserServiceClient {
	return &steamUserServiceClient{cc}
}

func (c *steamUserServiceClient) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, SteamUserService_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamUserServiceClient) GetFriendsList(ctx context.Context, in *FriendsListRequest, opts ...grpc.CallOption) (*FriendsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendsListResponse)
	err := c.cc.Invoke(ctx, SteamUserService_GetFriendsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamUserServiceClient) GetUserStatus(ctx context.Context, in *UserStatusRequest, opts ...grpc.CallOption) (*UserStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStatusResponse)
	err := c.cc.Invoke(ctx, SteamUserService_GetUserStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamUserServiceClient) ResolveVanityURL(ctx context.Context, in *ResolveVanityURLRequest, opts ...grpc.CallOption) (*ResolveVanityURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveVanityURLResponse)
	err := c.cc.Invoke(ctx, SteamUserService_ResolveVanityURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SteamUserServiceServer is the server API for SteamUserService service.
// All implementations must embed UnimplementedSteamUserServiceServer
// for forward compatibility.
//
// User Service
type SteamUserServiceServer interface {
	GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	GetFriendsList(context.Context, *FriendsListRequest) (*FriendsListResponse, error)
	GetUserStatus(context.Context, *UserStatusRequest) (*UserStatusResponse, error)
	ResolveVanityURL(context.Context, *ResolveVanityURLRequest) (*ResolveVanityURLResponse, error)
	mustEmbedUnimplementedSteamUserServiceServer()
}

// UnimplementedSteamUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSteamUserServiceServer struct{}

func (UnimplementedSteamUserServiceServer) GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedSteamUserServiceServer) GetFriendsList(context.Context, *FriendsListRequest) (*FriendsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendsList not implemented")
}
func (UnimplementedSteamUserServiceServer) GetUserStatus(context.Context, *UserStatusRequest) (*UserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatus not implemented")
}
func (UnimplementedSteamUserServiceServer) ResolveVanityURL(context.Context, *ResolveVanityURLRequest) (*ResolveVanityURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveVanityURL not implemented")
}
func (UnimplementedSteamUserServiceServer) mustEmbedUnimplementedSteamUserServiceServer() {}
func (UnimplementedSteamUserServiceServer) testEmbeddedByValue()                          {}

// UnsafeSteamUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SteamUserServiceServer will
// result in compilation errors.
type UnsafeSteamUserServiceServer interface {
	mustEmbedUnimplementedSteamUserServiceServer()
}

func RegisterSteamUserServiceServer(s grpc.ServiceRegistrar, srv SteamUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedSteamUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SteamUserService_ServiceDesc, srv)
}

func _SteamUserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamUserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamUserService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamUserServiceServer).GetUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamUserService_GetFriendsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamUserServiceServer).GetFriendsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamUserService_GetFriendsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamUserServiceServer).GetFriendsList(ctx, req.(*FriendsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamUserService_GetUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamUserServiceServer).GetUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamUserService_GetUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamUserServiceServer).GetUserStatus(ctx, req.(*UserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamUserService_ResolveVanityURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveVanityURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamUserServiceServer).ResolveVanityURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamUserService_ResolveVanityURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamUserServiceServer).ResolveVanityURL(ctx, req.(*ResolveVanityURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SteamUserService_ServiceDesc is the grpc.ServiceDesc for SteamUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SteamUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "steambridge.SteamUserService",
	HandlerType: (*SteamUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _SteamUserService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetFriendsList",
			Handler:    _SteamUserService_GetFriendsList_Handler,
		},
		{
			MethodName: "GetUserStatus",
			Handler:    _SteamUserService_GetUserStatus_Handler,
		},
		{
			MethodName: "ResolveVanityURL",
			Handler:    _SteamUserService_ResolveVanityURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/steam_bridge.proto",
}

const (
	SteamMessagingService_SendMessage_FullMethodName            = "/steambridge.SteamMessagingService/SendMessage"
	SteamMessagingService_SubscribeToMessages_FullMethodName    = "/steambridge.SteamMessagingService/SubscribeToMessages"
	SteamMessagingService_SendTypingNotification_FullMethodName = "/steambridge.SteamMessagingService/SendTypingNotification"
	SteamMessagingService_UploadImageToSteam_FullMethodName     = "/steambridge.SteamMessagingService/UploadImageToSteam"
	SteamMessagingService_DownloadImageFromSteam_FullMethodName = "/steambridge.SteamMessagingService/DownloadImageFromSteam"
	SteamMessagingService_GetUserAvatarData_FullMethodName      = "/steambridge.SteamMessagingService/GetUserAvatarData"
	SteamMessagingService_GetChatMessageHistory_FullMethodName  = "/steambridge.SteamMessagingService/GetChatMessageHistory"
)

// SteamMessagingServiceClient is the client API for SteamMessagingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Messaging Service
type SteamMessagingServiceClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	SubscribeToMessages(ctx context.Context, in *MessageSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageEvent], error)
	SendTypingNotification(ctx context.Context, in *TypingNotificationRequest, opts ...grpc.CallOption) (*TypingNotificationResponse, error)
	UploadImageToSteam(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	DownloadImageFromSteam(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error)
	GetUserAvatarData(ctx context.Context, in *GetUserAvatarDataRequest, opts ...grpc.CallOption) (*GetUserAvatarDataResponse, error)
	GetChatMessageHistory(ctx context.Context, in *ChatMessageHistoryRequest, opts ...grpc.CallOption) (*ChatMessageHistoryResponse, error)
}

type steamMessagingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSteamMessagingServiceClient(cc grpc.ClientConnInterface) SteamMessagingServiceClient {
	return &steamMessagingServiceClient{cc}
}

func (c *steamMessagingServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, SteamMessagingService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamMessagingServiceClient) SubscribeToMessages(ctx context.Context, in *MessageSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SteamMessagingService_ServiceDesc.Streams[0], SteamMessagingService_SubscribeToMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MessageSubscriptionRequest, MessageEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SteamMessagingService_SubscribeToMessagesClient = grpc.ServerStreamingClient[MessageEvent]

func (c *steamMessagingServiceClient) SendTypingNotification(ctx context.Context, in *TypingNotificationRequest, opts ...grpc.CallOption) (*TypingNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TypingNotificationResponse)
	err := c.cc.Invoke(ctx, SteamMessagingService_SendTypingNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamMessagingServiceClient) UploadImageToSteam(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, SteamMessagingService_UploadImageToSteam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamMessagingServiceClient) DownloadImageFromSteam(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadImageResponse)
	err := c.cc.Invoke(ctx, SteamMessagingService_DownloadImageFromSteam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamMessagingServiceClient) GetUserAvatarData(ctx context.Context, in *GetUserAvatarDataRequest, opts ...grpc.CallOption) (*GetUserAvatarDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserAvatarDataResponse)
	err := c.cc.Invoke(ctx, SteamMessagingService_GetUserAvatarData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamMessagingServiceClient) GetChatMessageHistory(ctx context.Context, in *ChatMessageHistoryRequest, opts ...grpc.CallOption) (*ChatMessageHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatMessageHistoryResponse)
	err := c.cc.Invoke(ctx, SteamMessagingService_GetChatMessageHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SteamMessagingServiceServer is the server API for SteamMessagingService service.
// All implementations must embed UnimplementedSteamMessagingServiceServer
// for forward compatibility.
//
// Messaging Service
type SteamMessagingServiceServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	SubscribeToMessages(*MessageSubscriptionRequest, grpc.ServerStreamingServer[MessageEvent]) error
	SendTypingNotification(context.Context, *TypingNotificationRequest) (*TypingNotificationResponse, error)
	UploadImageToSteam(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	DownloadImageFromSteam(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error)
	GetUserAvatarData(context.Context, *GetUserAvatarDataRequest) (*GetUserAvatarDataResponse, error)
	GetChatMessageHistory(context.Context, *ChatMessageHistoryRequest) (*ChatMessageHistoryResponse, error)
	mustEmbedUnimplementedSteamMessagingServiceServer()
}

// UnimplementedSteamMessagingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSteamMessagingServiceServer struct{}

func (UnimplementedSteamMessagingServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedSteamMessagingServiceServer) SubscribeToMessages(*MessageSubscriptionRequest, grpc.ServerStreamingServer[MessageEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToMessages not implemented")
}
func (UnimplementedSteamMessagingServiceServer) SendTypingNotification(context.Context, *TypingNotificationRequest) (*TypingNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTypingNotification not implemented")
}
func (UnimplementedSteamMessagingServiceServer) UploadImageToSteam(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImageToSteam not implemented")
}
func (UnimplementedSteamMessagingServiceServer) DownloadImageFromSteam(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadImageFromSteam not implemented")
}
func (UnimplementedSteamMessagingServiceServer) GetUserAvatarData(context.Context, *GetUserAvatarDataRequest) (*GetUserAvatarDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAvatarData not implemented")
}
func (UnimplementedSteamMessagingServiceServer) GetChatMessageHistory(context.Context, *ChatMessageHistoryRequest) (*ChatMessageHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessageHistory not implemented")
}
func (UnimplementedSteamMessagingServiceServer) mustEmbedUnimplementedSteamMessagingServiceServer() {}
func (UnimplementedSteamMessagingServiceServer) testEmbeddedByValue()                               {}

// UnsafeSteamMessagingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SteamMessagingServiceServer will
// result in compilation errors.
type UnsafeSteamMessagingServiceServer interface {
	mustEmbedUnimplementedSteamMessagingServiceServer()
}

func RegisterSteamMessagingServiceServer(s grpc.ServiceRegistrar, srv SteamMessagingServiceServer) {
	// If the following call pancis, it indicates UnimplementedSteamMessagingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SteamMessagingService_ServiceDesc, srv)
}

func _SteamMessagingService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamMessagingServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamMessagingService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamMessagingServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamMessagingService_SubscribeToMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessageSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SteamMessagingServiceServer).SubscribeToMessages(m, &grpc.GenericServerStream[MessageSubscriptionRequest, MessageEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SteamMessagingService_SubscribeToMessagesServer = grpc.ServerStreamingServer[MessageEvent]

func _SteamMessagingService_SendTypingNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypingNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamMessagingServiceServer).SendTypingNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamMessagingService_SendTypingNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamMessagingServiceServer).SendTypingNotification(ctx, req.(*TypingNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamMessagingService_UploadImageToSteam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamMessagingServiceServer).UploadImageToSteam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamMessagingService_UploadImageToSteam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamMessagingServiceServer).UploadImageToSteam(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamMessagingService_DownloadImageFromSteam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamMessagingServiceServer).DownloadImageFromSteam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamMessagingService_DownloadImageFromSteam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamMessagingServiceServer).DownloadImageFromSteam(ctx, req.(*DownloadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamMessagingService_GetUserAvatarData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAvatarDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamMessagingServiceServer).GetUserAvatarData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamMessagingService_GetUserAvatarData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamMessagingServiceServer).GetUserAvatarData(ctx, req.(*GetUserAvatarDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SteamMessagingService_GetChatMessageHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessageHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamMessagingServiceServer).GetChatMessageHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SteamMessagingService_GetChatMessageHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamMessagingServiceServer).GetChatMessageHistory(ctx, req.(*ChatMessageHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SteamMessagingService_ServiceDesc is the grpc.ServiceDesc for SteamMessagingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SteamMessagingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "steambridge.SteamMessagingService",
	HandlerType: (*SteamMessagingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _SteamMessagingService_SendMessage_Handler,
		},
		{
			MethodName: "SendTypingNotification",
			Handler:    _SteamMessagingService_SendTypingNotification_Handler,
		},
		{
			MethodName: "UploadImageToSteam",
			Handler:    _SteamMessagingService_UploadImageToSteam_Handler,
		},
		{
			MethodName: "DownloadImageFromSteam",
			Handler:    _SteamMessagingService_DownloadImageFromSteam_Handler,
		},
		{
			MethodName: "GetUserAvatarData",
			Handler:    _SteamMessagingService_GetUserAvatarData_Handler,
		},
		{
			MethodName: "GetChatMessageHistory",
			Handler:    _SteamMessagingService_GetChatMessageHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToMessages",
			Handler:       _SteamMessagingService_SubscribeToMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Proto/steam_bridge.proto",
}

const (
	SteamSessionService_SubscribeToSessionEvents_FullMethodName = "/steambridge.SteamSessionService/SubscribeToSessionEvents"
)

// SteamSessionServiceClient is the client API for SteamSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Session Management Service
type SteamSessionServiceClient interface {
	SubscribeToSessionEvents(ctx context.Context, in *SessionSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SessionEvent], error)
}

type steamSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSteamSessionServiceClient(cc grpc.ClientConnInterface) SteamSessionServiceClient {
	return &steamSessionServiceClient{cc}
}

func (c *steamSessionServiceClient) SubscribeToSessionEvents(ctx context.Context, in *SessionSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SessionEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SteamSessionService_ServiceDesc.Streams[0], SteamSessionService_SubscribeToSessionEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SessionSubscriptionRequest, SessionEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SteamSessionService_SubscribeToSessionEventsClient = grpc.ServerStreamingClient[SessionEvent]

// SteamSessionServiceServer is the server API for SteamSessionService service.
// All implementations must embed UnimplementedSteamSessionServiceServer
// for forward compatibility.
//
// Session Management Service
type SteamSessionServiceServer interface {
	SubscribeToSessionEvents(*SessionSubscriptionRequest, grpc.ServerStreamingServer[SessionEvent]) error
	mustEmbedUnimplementedSteamSessionServiceServer()
}

// UnimplementedSteamSessionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSteamSessionServiceServer struct{}

func (UnimplementedSteamSessionServiceServer) SubscribeToSessionEvents(*SessionSubscriptionRequest, grpc.ServerStreamingServer[SessionEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToSessionEvents not implemented")
}
func (UnimplementedSteamSessionServiceServer) mustEmbedUnimplementedSteamSessionServiceServer() {}
func (UnimplementedSteamSessionServiceServer) testEmbeddedByValue()                             {}

// UnsafeSteamSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SteamSessionServiceServer will
// result in compilation errors.
type UnsafeSteamSessionServiceServer interface {
	mustEmbedUnimplementedSteamSessionServiceServer()
}

func RegisterSteamSessionServiceServer(s grpc.ServiceRegistrar, srv SteamSessionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSteamSessionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SteamSessionService_ServiceDesc, srv)
}

func _SteamSessionService_SubscribeToSessionEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SessionSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SteamSessionServiceServer).SubscribeToSessionEvents(m, &grpc.GenericServerStream[SessionSubscriptionRequest, SessionEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SteamSessionService_SubscribeToSessionEventsServer = grpc.ServerStreamingServer[SessionEvent]

// SteamSessionService_ServiceDesc is the grpc.ServiceDesc for SteamSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SteamSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "steambridge.SteamSessionService",
	HandlerType: (*SteamSessionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToSessionEvents",
			Handler:       _SteamSessionService_SubscribeToSessionEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Proto/steam_bridge.proto",
}
