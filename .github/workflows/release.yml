name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-binaries:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            runner: ubuntu-latest
            dotnet_runtime: linux-x64
          - goos: linux
            goarch: arm64
            runner: [self-hosted, Linux, ARM64]
            dotnet_runtime: linux-arm64
          - goos: windows
            goarch: amd64
            runner: ubuntu-latest
            dotnet_runtime: win-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'

    - name: Install system dependencies (Linux)
      if: matrix.goos == 'linux'
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler gcc-multilib libc6-dev libsqlite3-dev
          if [ "${{ matrix.goarch }}" = "arm64" ] && [ "${{ matrix.runner }}" = "ubuntu-latest" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
        fi

    - name: Build .NET SteamBridge
      working-directory: SteamBridge
      run: |
        # Set cross-compilation CC for ARM64 on x64 runners
        if [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ] && [ "${{ matrix.runner }}" = "ubuntu-latest" ]; then
          export CC=aarch64-linux-gnu-gcc
        fi
        
        dotnet publish -c Release --runtime ${{ matrix.dotnet_runtime }} --self-contained true \
          -p:PublishSingleFile=true -p:PublishTrimmed=false \
          -o ../steambridge-dist

    - name: Build Go binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        # Set cross-compilation environment for ARM64 on x64 runners
        if [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ] && [ "${{ matrix.runner }}" = "ubuntu-latest" ]; then
          export CC=aarch64-linux-gnu-gcc
        fi
        
        # Set binary name
        BINARY_NAME="steam"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        # Build the Go binary
        go build -a -ldflags="-s -w" -o "${BINARY_NAME}" ./cmd/steam
        
        # Move to distribution directory
        mv "${BINARY_NAME}" steambridge-dist/

    - name: Create release package
      run: |
        PACKAGE_NAME="matrix-steam-bridge-${{ matrix.goos }}-${{ matrix.goarch }}"
        
        # Create release directory structure
        mkdir -p "${PACKAGE_NAME}"
        cp -r steambridge-dist/* "${PACKAGE_NAME}/"
        
        # Add README and example config if they exist
        if [ -f README.md ]; then cp README.md "${PACKAGE_NAME}/"; fi
        if [ -f config.example.yaml ]; then cp config.example.yaml "${PACKAGE_NAME}/"; fi
        
        # Create archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -r "${PACKAGE_NAME}.zip" "${PACKAGE_NAME}/"
          echo "ASSET_NAME=${PACKAGE_NAME}.zip" >> $GITHUB_ENV
        else
          tar -czf "${PACKAGE_NAME}.tar.gz" "${PACKAGE_NAME}/"
          echo "ASSET_NAME=${PACKAGE_NAME}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: matrix-steam-bridge-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ${{ env.ASSET_NAME }}

  create-release:
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        files: ./artifacts/*/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}