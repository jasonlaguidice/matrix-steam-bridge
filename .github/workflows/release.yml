name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-binaries:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm64
            runner: [self-hosted, Linux, ARM64]
          - goos: windows
            goarch: amd64
            runner: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.6'

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler libc6-dev libsqlite3-dev libolm-dev

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install protoc
        # Build olm library from source for Matrix encryption
        git clone https://gitlab.matrix.org/matrix-org/olm.git C:\olm
        cd C:\olm
        cmake -S . -B build -DCMAKE_INSTALL_PREFIX=C:\olm-install -DCMAKE_POLICY_VERSION_MINIMUM=3.5
        cmake --build build --config Release
        cmake --install build

    - name: Build .NET SteamBridge (Linux)
      if: runner.os == 'Linux'
      working-directory: SteamBridge
      run: |
        # Force use of system protoc on ARM64 to avoid segfault
        if [ "${{ matrix.goarch }}" = "arm64" ]; then
          export Protobuf_ProtocFullPath=$(which protoc)
          RUNTIME="linux-arm64"
        else
          RUNTIME="linux-x64"
        fi
        
        # Build SteamBridge with self-contained publish (matching build.sh approach)
        dotnet publish --configuration Release --self-contained true --runtime "$RUNTIME"
        
        # Copy built executable and rename to steamkit-service
        mkdir -p ../steambridge-dist
        cp "bin/Release/net8.0/$RUNTIME/publish/SteamBridge" "../steambridge-dist/steamkit-service"

    - name: Build .NET SteamBridge (Windows)
      if: runner.os == 'Windows'
      working-directory: SteamBridge
      run: |
        # Build SteamBridge with self-contained publish (matching build.sh approach)
        $RUNTIME = "win-x64"
        dotnet publish --configuration Release --self-contained true --runtime $RUNTIME
        
        # Copy built executable and rename to steamkit-service.exe
        mkdir -p ../steambridge-dist
        Copy-Item "bin/Release/net8.0/$RUNTIME/publish/SteamBridge.exe" "../steambridge-dist/steamkit-service.exe"

    - name: Build Go binary (Linux)
      if: runner.os == 'Linux'
      env:
        CGO_ENABLED: 1
      run: |
        # Build ldflags matching build.sh
        MAUTRIX_VERSION=$(cat go.mod | grep 'maunium.net/go/mautrix ' | awk '{ print $2 }' | head -n1)
        GO_LDFLAGS="-s -w -X main.Tag=$(git describe --exact-match --tags 2>/dev/null) -X main.Commit=$(git rev-parse HEAD) -X 'main.BuildTime=$(date -Iseconds)' -X 'maunium.net/go/mautrix.GoModVersion=$MAUTRIX_VERSION'"
        
        # Build the Go binary natively (no cross-compilation)
        go build -ldflags="$GO_LDFLAGS" -o "steam" ./cmd/steam
        
        # Move to distribution directory
        mv "steam" steambridge-dist/

    - name: Build Go binary (Windows)
      if: runner.os == 'Windows'
      env:
        CGO_ENABLED: 1
        CGO_CFLAGS: "-IC:/olm-install/include"
        CGO_LDFLAGS: "-LC:/olm-install/lib"
      run: |
        # Build ldflags matching build.sh (PowerShell syntax)
        $MAUTRIX_VERSION = (Select-String -Path go.mod -Pattern 'maunium.net/go/mautrix ' | Select-Object -First 1).Line.Split()[1]
        $TAG = git describe --exact-match --tags 2>$null
        $COMMIT = git rev-parse HEAD
        $BUILD_TIME = Get-Date -Format "yyyy-MM-ddTHH:mm:sszzz"
        $GO_LDFLAGS = "-s -w -X main.Tag=$TAG -X main.Commit=$COMMIT -X `"main.BuildTime=$BUILD_TIME`" -X `"maunium.net/go/mautrix.GoModVersion=$MAUTRIX_VERSION`""
        
        # Build the Go binary natively (no cross-compilation)
        go build -ldflags="$GO_LDFLAGS" -o "steam.exe" ./cmd/steam
        
        # Move to distribution directory
        mv "steam.exe" steambridge-dist/

    - name: Create release package (Linux)
      if: runner.os == 'Linux'
      run: |
        PACKAGE_NAME="matrix-steam-bridge-${{ matrix.goos }}-${{ matrix.goarch }}"
        
        # Create release directory structure
        mkdir -p "${PACKAGE_NAME}"
        cp -r steambridge-dist/* "${PACKAGE_NAME}/"
        
        # Add README and example config if they exist
        if [ -f README.md ]; then cp README.md "${PACKAGE_NAME}/"; fi
        if [ -f config.example.yaml ]; then cp config.example.yaml "${PACKAGE_NAME}/"; fi
        
        # Create archive
        tar -czf "${PACKAGE_NAME}.tar.gz" "${PACKAGE_NAME}/"
        echo "ASSET_NAME=${PACKAGE_NAME}.tar.gz" >> $GITHUB_ENV

    - name: Create release package (Windows)
      if: runner.os == 'Windows'
      run: |
        $PACKAGE_NAME = "matrix-steam-bridge-${{ matrix.goos }}-${{ matrix.goarch }}"
        
        # Create release directory structure
        mkdir "$PACKAGE_NAME"
        Copy-Item -Recurse steambridge-dist/* "$PACKAGE_NAME/"
        
        # Add README and example config if they exist
        if (Test-Path README.md) { Copy-Item README.md "$PACKAGE_NAME/" }
        if (Test-Path config.example.yaml) { Copy-Item config.example.yaml "$PACKAGE_NAME/" }
        
        # Create archive
        Compress-Archive -Path "$PACKAGE_NAME" -DestinationPath "$PACKAGE_NAME.zip"
        echo "ASSET_NAME=$PACKAGE_NAME.zip" >> $env:GITHUB_ENV

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: matrix-steam-bridge-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ${{ env.ASSET_NAME }}

  create-release:
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        files: ./artifacts/*/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}